#include <stdio.h>
#include <iostream>
#include <edelweiss/JsonParser.h>
#include <fstream>
#include <string.h>

using namespace std;


//declaring class to store variables of trade
class trade
{
public: 
vector<int> transaction;
vector<int> investment;
vector<int> sell;
vector<string> entry;
vector<string> stat;
int pos, neg , profit;

void summary()
{
cout<<"Total Profit: "<<profit<<endl;
cout<<"Successful trades: "<<pos<<endl;
cout<<"Unsuccessful trades: "<<neg<<endl;
float ratio = pos/(pos+neg); 
cout<<"Success ratio: "<<ratio<<endl ;
}

//constructor
trade()
{
pos = 0;
neg = 0;
profit = 0;
}
};


double GetDouble(JsonObject jObject) {
return atof(jObject.toString().c_str());
}

/*int find_value (JsonObject jObject, string key , string value , double num)
{
vector<JsonObject> arr = jObject[key][value];
for(size_t itr = 0 ; itr < arr.size() ; itr++)
{
if(GetDouble(arr[itr]) == num)
return itr;
} 
return -1;
}*/

trade backtest (vector<double> price, vector<double> sma, vector<string> ltt, int qty = 10)
{
//to check if there is a standing position
int flag = 0;
//to account for the difference in the data points of price and sma
int count = price.size() - sma.size();
int profit; 

trade back;

for(size_t iter = 1; iter < price.size() ; iter++)
{
if(flag == 0 && (price[iter+count] > sma[iter]) && (price[iter+count-1] < sma[iter-1]))
{
flag = 1; 
back.investment.push_back(qty*price[iter+count]);
}
else if(flag == 1 && price[iter+count] < sma[iter])
{
flag = 0;
back.sell.push_back(qty*price[iter+count]);
profit = back.sell.back() - back.investment.back();
back.profit += profit;
back.transaction.push_back(profit);
if(profit>=0)
back.pos++;
else
back.neg++;
}
}


return back;
}
int main ()
{
std::ifstream inFile("7.txt", std::ifstream::binary);
std::string fileContents((std::istreambuf_iterator<char>(inFile)), std::istreambuf_iterator<char>());

//making JSON object from the data given
JsonParser parser(fileContents);
JsonObject reqObject = parser.getJsonObject();

//extracting JSON object from the above JSON object which contains only the trade data
JsonObject plotPoints = reqObject["data"]["pltPnts"];

//making vector to get individual data point (still a JSON object)
vector<JsonObject> script_open(plotPoints["open"]);
vector<JsonObject> script_low(plotPoints["low"]);
vector<JsonObject> script_high(plotPoints["high"]);
vector<JsonObject> script_close(plotPoints["close"]);
vector<JsonObject> script_vol(plotPoints["vol"]);
vector<JsonObject> script_ltt(plotPoints["ltt"]);

//Declaring variable to store indicator data 
JsonObject techind = reqObject["data"]["tiOut"];
vector<JsonObject> indPoints(techind[0]["rsltSet"][0]["vals"]); 

//testing if above code works
cout<<script_low.size()<<endl;
cout<<GetDouble(script_open[4])<<endl;

//making temporary file for observing the data
ofstream outfile;
outfile.open("hudco.txt"); 

outfile<<"open\t\tclose\t\tlow\t\thigh\t\tvol\t\tltt\t\tsma"<<endl;

int count; 

vector<double> open,close,low,high,vol,sma,indPoints_d;
vetor<string> ltt;

for(size_t iter = 0 ; iter < script_low.size() ; iter++)
{

//making a double vector for each data point type
open.push_back(GetDouble(script_open[iter]));
close.push_back(GetDouble(script_close[iter]));
low.push_back(GetDouble(script_low[iter]));
high.push_back(GetDouble(script_high[iter]));
vol.push_back(GetDouble(script_vol[iter]));
ltt.push_back(script_ltt[iter].toString().c_str());

//printing in the file
outfile<<open.back()<<"\t";
outfile<<close.back()<<"\t";
outfile<<low.back()<<"\t";
outfile<<high.back()<<"\t";
outfile<<vol.back()<<"\t";
outfile<<ltt<<"\t";
count = indPoints.size() + iter - script_low.size();

//factoring in the different size of sma and price vector
if(count >= 0)
{
indPoints_d.push_back(GetDouble(indPoints[count]));
outfile<<indPoints_d.back()<<endl;
}
}

outfile.close();

trade test = backtest(close,indPoints_d,ltt);
test.summary();

return 0;

}
